{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyPlnPvBwedltwMI2VAjs8qq",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/06-09-2004/Data-Science-Tutorials/blob/main/26_07_24.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tG3P5Ln5fuy9",
        "outputId": "0c6b7b46-4e31-4bd4-b1be-95cbbff2f126"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "np.array():\n",
            " [1 3 5]\n",
            "\n",
            "np.zeros():\n",
            " [[0. 0. 0.]\n",
            " [0. 0. 0.]\n",
            " [0. 0. 0.]]\n",
            "\n",
            "np.ones():\n",
            " [[1. 1. 1. 1.]\n",
            " [1. 1. 1. 1.]]\n",
            "original array:\n",
            " [ 1  3  5  7  9 11]\n",
            "\n",
            "reshaped array:\n",
            " [[ 1  3  5]\n",
            " [ 7  9 11]]\n",
            "\n",
            "Transposed array:\n",
            " [[ 1  7]\n",
            " [ 3  9]\n",
            " [ 5 11]]\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "#crerate an array using np.array(0\n",
        "array1=np.array([1,3,5])\n",
        "print(\"np.array():\\n\",array1)\n",
        "#create an array filled with zeros using np.zeros()\n",
        "array2=np.zeros((3,3))\n",
        "print(\"\\nnp.zeros():\\n\",array2)\n",
        "array3=np.ones((2,4))\n",
        "print(\"\\nnp.ones():\\n\",array3)\n",
        "#create a 1d array\n",
        "array1=np.array([1,3,5,7,9,11])\n",
        "#reshape the 1d array into a 2d array\n",
        "array2=np.reshape(array1,(2,3))\n",
        "#transpose the 2d array\n",
        "array3=np.transpose(array2)\n",
        "print(\"original array:\\n\",array1)\n",
        "print(\"\\nreshaped array:\\n\",array2)\n",
        "print(\"\\nTransposed array:\\n\",array3)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "-3yv9gPolqVr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "x1=np.array([True,False,True])\n",
        "x2=np.array([False,False,True])\n",
        "#logical AND\n",
        "print(np.logical_and(x1,x2))\n",
        "#logical or\n",
        "print(np.logical_or(x1,x2))\n",
        "#logical not\n",
        "print(np.logical_not(x1))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xtFhqPLYhFgq",
        "outputId": "2c59acfa-b1c7-4812-95ea-2791864d45e4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[False False  True]\n",
            "[ True False  True]\n",
            "[False  True False]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "numbers=np.array([1.23456,2.34567,3.45678,4.56789])\n",
        "#round the array to two decimal places\n",
        "rounded_array=np.round(numbers,2)\n",
        "print(rounded_array)\n",
        "array1=np.array([1.23456,2.34567,3.45678,4.56789])\n",
        "print(\"array after floor():\", np.floor(array1))\n",
        "print(\"array after ceil():\",np.ceil(array1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LcwS18LLj3cM",
        "outputId": "120ff206-9667-4de3-daf0-82b1d0df6035"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.23 2.35 3.46 4.57]\n",
            "array after floor(): [1. 2. 3. 4.]\n",
            "array after ceil(): [2. 3. 4. 5.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#create a 2D array\n",
        "array1=np.array([[2,4,6],\n",
        "                 [8,10,12],\n",
        "                 [14,16,18]])\n",
        "#compute median along horizontal axis\n",
        "result1=np.median(array1,axis=1)\n",
        "print(\"median along horizontal axis:\",result1)\n",
        "#compute median along vertical axis\n",
        "result2=np.median(array1,axis=0)\n",
        "print(\"median along vertical axis:\",result2)\n",
        "#compute median of entire array\n",
        "result3=np.median(array1)\n",
        "print(\"median of entire array:\",result3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-wddQ8jElwBO",
        "outputId": "eb6c2845-986a-46a1-c3c0-c1d80de6aae2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "median along horizontal axis: [ 4. 10. 16.]\n",
            "median along vertical axis: [ 8. 10. 12.]\n",
            "median of entire array: 10.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#create a 2D array\n",
        "array1=np.array([[2,5,9],\n",
        "                [3,8,11],\n",
        "                [4,6,7]])\n",
        "#compute standard deviation along horizontal axis\n",
        "result1=np.std(array1,axis=1)\n",
        "print(\"standard deviation along horizontal axis:\",result1)\n",
        "#compute standard deviation along vertical axis\n",
        "result2=np.std(array1,axis=0)\n",
        "print(\"standard deviation along vertical axis:\",result2)\n",
        "#compute standard deviation of entire array\n",
        "result3=np.std(array1)\n",
        "print(\"standard deviation of entire array:\",result3)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pDAiTYc4o4Bt",
        "outputId": "59a9c8e6-7db1-42b4-b254-4997b6563691"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "standard deviation along horizontal axis: [2.86744176 3.29983165 1.24721913]\n",
            "standard deviation along vertical axis: [0.81649658 1.24721913 1.63299316]\n",
            "standard deviation of entire array: 2.7666443551086073\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "array1=np.array(['iphone:','price:'])\n",
        "array2=np.array(['15','$900'])\n",
        "#perform element-wise array string concatenation\n",
        "result=np.char.add(array1,array2)\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xdM35P7GrS-h",
        "outputId": "4e3b0379-f40f-4d34-e698-4c5a33388fc0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['iphone:15' 'price:$900']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#define array with three string elements\n",
        "array1=np.array(['A','B','C'])\n",
        "#repeat each element in array1 two times\n",
        "result = np.char.multiply(array1,2)\n",
        "print(result)\n",
        "#define  an array with three string elements\n",
        "array1=np.array(['eric','paul','sean'])\n",
        "#capitalize the first letter of each string in array\n",
        "result=np.char.capitalize(array1)\n",
        "print(result)\n",
        "array1=np.array(['nEpall','AmeriCAN','CaNadIan'])\n",
        "#create all string elements to uppercase\n",
        "result1=np.char.upper(array1)\n",
        "#convert all string elements to lowercase\n",
        "result2=np.char.lower(array1)\n",
        "print(\"to uppercase:\",result1)\n",
        "print(\"to lowercase:\",result2)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SlyOYQaEuE7F",
        "outputId": "319881fb-91b9-4f24-d9ad-a58b1fca5f64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['AA' 'BB' 'CC']\n",
            "['Eric' 'Paul' 'Sean']\n",
            "to uppercase: ['NEPALL' 'AMERICAN' 'CANADIAN']\n",
            "to lowercase: ['nepall' 'american' 'canadian']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#create two arrays of strings\n",
        "array1=np.array(['C','Python','Swift'])\n",
        "array2=np.array(['C++','Python','Java'])\n",
        "#check if each element of the arrays is equal\n",
        "result=np.char.equal(array1,array2)\n",
        "print(result)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z66VX3TJuDJn",
        "outputId": "da96797a-31c2-4c42-f3c3-2940699e1617"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[False  True False]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "arr=np.array([1,2,3,4])\n",
        "print(\"first element of array is:\",arr[0])\n",
        "print(\"sum of 2 elements of array is:\",arr[2]+arr[3])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NVNfNddQxl6l",
        "outputId": "271f49e0-74b7-4fff-b267-a53e2f4f47d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "first element of array is: 1\n",
            "sum of 2 elements of array is: 7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "arr=np.array([1,2,3,4,5,6,7])\n",
        "print(\"Slicing the elements from 1 to 4:\",arr[1:5])\n",
        "print(\"Slicing the elements from 4 to end:\",arr[4:])\n",
        "print(\"Slicing the elements from start to 3:\",arr[:4])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SOwEo7koypsM",
        "outputId": "281e6a83-04c5-4245-9047-6f727c8991c2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Slicing the elements from 1 to 4: [2 3 4 5]\n",
            "Slicing the elements from 4 to end: [5 6 7]\n",
            "Slicing the elements from start to 3: [1 2 3 4]\n"
          ]
        }
      ]
    }
  ]
}
